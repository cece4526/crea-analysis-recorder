<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Céréales - CRÉA Analysis</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="/build/app.css" rel="stylesheet">
    <link href="/build/dashboard.css" rel="stylesheet">
</head>
<body class="bg-light">
    <div class="container-fluid mt-3">
        <h1 class="text-center text-primary mb-4">📊 Dashboard de Production - Céréales</h1>
        
        <div class="row">
            <!-- OF 1 -->
            <div class="col-md-6">
                {% if of1 %}
                <div class="of-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h3>🌾 OF {{ of1.numero }}</h3>
                            <p class="mb-0">
                                <span class="status-indicator status-{{ of1.statut }}"></span>
                                Statut: {{ of1.statut|upper }}
                            </p>
                            {% if of1.produit %}
                            <p class="mb-0">Produit: {{ of1.produit }}</p>
                            {% endif %}
                            {% if of1.quantite %}
                            <p class="mb-0">Quantité: {{ of1.quantite }}</p>
                            {% endif %}
                        </div>
                        <div>
                            <button class="btn btn-outline-primary btn-sm me-2" onclick="openHaccpModal('{{ of1.numero }}', 'cereales')">
                                <i class="fas fa-shield-alt me-1"></i>HACCP
                            </button>
                            <button class="btn btn-outline-success btn-sm" onclick="openCuveHydrolyseModal('{{ of1.numero }}', 'cereales')">
                                <i class="fas fa-flask me-1"></i>Cuve Hydrolyse
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="process-card">
                    <h5>📈 Processus de Production</h5>
                    <div class="row">
                        <div class="col-6">
                            <div class="text-center p-3 border rounded">
                                <div class="status-indicator status-en-cours"></div>
                                <strong>Cuves Céréales</strong>
                                <div class="mt-2">
                                    <small class="text-muted">Température: 85°C</small><br>
                                    <small class="text-muted">Durée: 45 min</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="text-center p-3 border rounded">
                                <div class="status-indicator status-en-attente"></div>
                                <strong>Décanteur</strong>
                                <div class="mt-2">
                                    <small class="text-muted">En attente</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="process-card">
                    <h5>🔬 Enzymes & Corrections</h5>
                    <div class="row">
                        <div class="col-4">
                            <div class="text-center p-2 border rounded">
                                <div class="status-indicator status-en-cours"></div>
                                <strong>Enzyme</strong><br>
                                <small>10:30</small>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="text-center p-2 border rounded">
                                <div class="status-indicator status-en-attente"></div>
                                <strong>Avant Correct</strong><br>
                                <small>--:--</small>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="text-center p-2 border rounded">
                                <div class="status-indicator status-en-attente"></div>
                                <strong>Après Correct</strong><br>
                                <small>--:--</small>
                            </div>
                        </div>
                    </div>
                </div>
                {% else %}
                <div class="of-header">
                    <h3>🌾 Aucun OF actif</h3>
                    <p class="mb-0">Pas d'ordre de fabrication en cours</p>
                </div>
                {% endif %}
            </div>
            
            <!-- OF 2 -->
            <div class="col-md-6">
                {% if of2 %}
                <div class="of-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h3>🌾 OF {{ of2.numero }}</h3>
                            <p class="mb-0">
                                <span class="status-indicator status-{{ of2.statut }}"></span>
                                Statut: {{ of2.statut|upper }}
                            </p>
                            {% if of2.produit %}
                            <p class="mb-0">Produit: {{ of2.produit }}</p>
                            {% endif %}
                            {% if of2.quantite %}
                            <p class="mb-0">Quantité: {{ of2.quantite }}</p>
                            {% endif %}
                        </div>
                        <div>
                            <button class="btn btn-outline-primary btn-sm me-2" onclick="openHaccpModal('{{ of2.numero }}', 'cereales')">
                                <i class="fas fa-shield-alt me-1"></i>HACCP
                            </button>
                            <button class="btn btn-outline-success btn-sm" onclick="openCuveHydrolyseModal('{{ of2.numero }}', 'cereales')">
                                <i class="fas fa-flask me-1"></i>Cuve Hydrolyse
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="process-card">
                    <h5>📈 Processus de Production</h5>
                    <div class="row">
                        <div class="col-6">
                            <div class="text-center p-3 border rounded">
                                <div class="status-indicator status-termine"></div>
                                <strong>Cuves Céréales</strong>
                                <div class="mt-2">
                                    <small class="text-muted">Terminé</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="text-center p-3 border rounded">
                                <div class="status-indicator status-en-cours"></div>
                                <strong>Décanteur</strong>
                                <div class="mt-2">
                                    <small class="text-muted">En cours</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="process-card">
                    <h5>🔬 Enzymes & Corrections</h5>
                    <div class="row">
                        <div class="col-4">
                            <div class="text-center p-2 border rounded">
                                <div class="status-indicator status-termine"></div>
                                <strong>Enzyme</strong><br>
                                <small>09:15</small>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="text-center p-2 border rounded">
                                <div class="status-indicator status-termine"></div>
                                <strong>Avant Correct</strong><br>
                                <small>10:45</small>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="text-center p-2 border rounded">
                                <div class="status-indicator status-en-attente"></div>
                                <strong>Après Correct</strong><br>
                                <small>--:--</small>
                            </div>
                        </div>
                    </div>
                </div>
                {% else %}
                <div class="of-header">
                    <h3>🌾 Slot libre</h3>
                    <p class="mb-0">Prêt pour un nouvel OF</p>
                </div>
                {% endif %}
            </div>
        </div>
        
        <!-- Statistiques -->
        <div class="row mt-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h5>📊 Statistiques Générales</h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-md-3">
                                <h4 class="text-primary">{{ production_count }}</h4>
                                <p>Productions totales</p>
                            </div>
                            <div class="col-md-3">
                                <h4 class="text-success">{{ haccp_count }}</h4>
                                <p>Contrôles HACCP</p>
                            </div>
                            <div class="col-md-3">
                                <h4 class="text-warning">{{ of1 and of2 ? 2 : (of1 ? 1 : 0) }}</h4>
                                <p>OF actifs</p>
                            </div>
                            <div class="col-md-3">
                                <h4 class="text-info">{{ "now"|date("H:i") }}</h4>
                                <p>Heure actuelle</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Inclusion des popups -->
    {% include 'partials/haccp_modal.html.twig' %}
    {% include 'partials/cuve_hydrolyse_modal.html.twig' %}
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/build/runtime.js"></script>
    <script src="/build/app.js"></script>
    
    <script>
    // Script HACCP à charger après Bootstrap
    function openHaccpModal(ofNumero, productionType) {
        console.log('Tentative d\'ouverture de la popup HACCP pour OF:', ofNumero);
        
        // Vérifier que l'élément existe
        const modalElement = document.getElementById('haccpModal');
        if (!modalElement) {
            console.error('Élément haccpModal non trouvé');
            alert('Erreur: Popup HACCP non trouvée');
            return;
        }
        
        // Convertir le numéro d'OF en ID
        let ofId = null;
        if (ofNumero == '76931') {
            ofId = 1;
        } else if (ofNumero == '76932') {
            ofId = 2;
        } else {
            ofId = parseInt(ofNumero);
        }
        
        // Remplir l'ID de l'OF
        const ofIdInput = document.getElementById('haccp_of_id');
        if (ofIdInput) {
            ofIdInput.value = ofNumero; // On garde le numéro pour l'envoi
        }
        
        // Vérifier que Bootstrap est chargé
        if (typeof bootstrap === 'undefined') {
            console.error('Bootstrap non chargé');
            alert('Erreur: Bootstrap non chargé');
            return;
        }
        
        try {
            // Ouvrir la modal
            const modal = new bootstrap.Modal(modalElement);
            modal.show();
            
            // Charger les données existantes après ouverture du modal
            modalElement.addEventListener('shown.bs.modal', function() {
                loadExistingHaccpData(ofId);
            }, { once: true });
            
        } catch (error) {
            console.error('Erreur lors de l\'ouverture de la modal:', error);
            alert('Erreur lors de l\'ouverture de la popup: ' + error.message);
        }
    }
    
    // Fonction updateStatus pour mettre à jour les status visuels (doit être globale)
    function updateStatus() {
        // Contrôle température (2 champs numériques)
        const temperatureCible = parseFloat(document.getElementById('temperature_cible').value) || 110;
        const temperatureIndique = parseFloat(document.getElementById('temperature_indique').value) || 0;
        const statusTemperature = document.getElementById('status_temperature');
        
        if (temperatureIndique > 0) {
            if (temperatureIndique >= temperatureCible) {
                statusTemperature.className = 'bg-success rounded p-2';
            } else {
                statusTemperature.className = 'bg-danger rounded p-2';
            }
        } else {
            statusTemperature.className = 'bg-secondary rounded p-2';
        }
        statusTemperature.style.height = '20px';
        
        // Contrôle filtre pasteurisateur (case à cocher)
        const filtrePasteurisateur = document.getElementById('filtre_pasteurisateur_resultat').checked;
        const statusFiltrePasteurisateur = document.getElementById('status_filtre_pasteurisateur');
        
        if (filtrePasteurisateur) {
            statusFiltrePasteurisateur.className = 'bg-success rounded p-2';
        } else {
            statusFiltrePasteurisateur.className = 'bg-secondary rounded p-2';
        }
        statusFiltrePasteurisateur.style.height = '20px';
        
        // Contrôle filtre NEP (case à cocher)
        const filtreNep = document.getElementById('filtre_nep_resultat').checked;
        const statusFiltreNep = document.getElementById('status_filtre_nep');
        
        if (filtreNep) {
            statusFiltreNep.className = 'bg-success rounded p-2';
        } else {
            statusFiltreNep.className = 'bg-secondary rounded p-2';
        }
        statusFiltreNep.style.height = '20px';
    }
    
    // Gestion de la soumission du formulaire HACCP
    document.addEventListener('DOMContentLoaded', function() {
        const haccpForm = document.getElementById('haccpForm');
        if (haccpForm) {
            // Écouteurs pour les champs
            document.getElementById('temperature_cible').addEventListener('input', updateStatus);
            document.getElementById('temperature_indique').addEventListener('input', updateStatus);
            document.getElementById('filtre_pasteurisateur_resultat').addEventListener('change', updateStatus);
            document.getElementById('filtre_nep_resultat').addEventListener('change', updateStatus);
            
            haccpForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Validation critique pour température
                const temperatureCible = parseFloat(document.getElementById('temperature_cible').value) || 110;
                const temperatureIndique = parseFloat(document.getElementById('temperature_indique').value) || 0;
                
                if (temperatureIndique > 0 && temperatureIndique < temperatureCible) {
                    const confirm = window.confirm('⚠️ ATTENTION: La température indiquée (' + temperatureIndique + ') est inférieure à la température cible (' + temperatureCible + ').\n\nVoulez-vous quand même enregistrer ce contrôle ?');
                    if (!confirm) {
                        return;
                    }
                }
                
                // Envoi AJAX
                const formData = new FormData(this);
                
                fetch('/haccp/create', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Utiliser le message dynamique du serveur au lieu d'un message fixe
                        alert('✅ ' + data.message);
                        
                        // Fermer la modal
                        const modal = bootstrap.Modal.getInstance(document.getElementById('haccpModal'));
                        modal.hide();
                        
                        // Réinitialiser le formulaire
                        document.getElementById('haccpForm').reset();
                        updateStatus(); // Réinitialiser les status
                        
                        // Optionnel : recharger la page pour voir les nouveaux données
                        location.reload();
                    } else {
                        alert('❌ ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    alert('❌ Erreur de communication avec le serveur');
                });
            });
        }
    });
    
    // Scripts pour la Cuve Hydrolyse
    function openCuveHydrolyseModal(ofNumero, productionType) {
        console.log('Ouverture du modal Cuve Hydrolyse pour OF:', ofNumero);
        
        // Vérifier que l'élément existe
        const modalElement = document.getElementById('cuveHydrolyseModal');
        if (!modalElement) {
            console.error('Élément cuveHydrolyseModal non trouvé');
            alert('Erreur: Modal Cuve Hydrolyse non trouvé');
            return;
        }

        // Réinitialiser le formulaire AVANT de remplir les données
        document.getElementById('cuveHydrolyseForm').reset();
        
        // Ouvrir le modal
        const modal = new bootstrap.Modal(modalElement);
        modal.show();
        
        // Attendre que le modal soit complètement affiché avant de charger les détails
        modalElement.addEventListener('shown.bs.modal', function() {
            console.log('Modal complètement affiché, chargement des détails...');
            loadOFDetails(ofNumero);
        }, { once: true });
    }

    function loadOFDetails(ofNumero) {
        console.log('Chargement des détails pour OF numéro:', ofNumero);
        
        // Mapping des vrais produits de la base de données
        let ofId = null;
        let ofDescription = '';
        
        if (ofNumero == '76931') {
            ofId = 1;
            ofDescription = 'OF #76931 - Céréales Bio';
        } else if (ofNumero == '76932') {
            ofId = 2;
            ofDescription = 'OF #76932 - Céréales Standard';
        } else {
            // Par défaut, on utilise l'OF 1
            ofId = 1;
            ofDescription = 'OF #' + ofNumero + ' - Céréales Bio';
        }
        
        console.log('Mapping OF numéro', ofNumero, 'vers ID', ofId);
        
        // Remplir les champs avec les infos de l'OF
        const displayElement = document.getElementById('cuve_of_display');
        const idElement = document.getElementById('cuve_of_id');
        
        if (displayElement) {
            displayElement.value = ofDescription;
            console.log('Champ cuve_of_display trouvé et rempli avec:', ofDescription);
        } else {
            console.error('Élément cuve_of_display non trouvé !');
        }
        
        if (idElement) {
            idElement.value = ofId;
            console.log('Champ cuve_of_id trouvé et rempli avec:', ofId);
        } else {
            console.error('Élément cuve_of_id non trouvé !');
        }
        
        // Mettre à jour l'info dans le modal
        const ofInfo = document.getElementById('cuveOfInfo');
        if (ofInfo) {
            ofInfo.textContent = ofNumero;
            console.log('Élément cuveOfInfo trouvé et rempli avec:', ofNumero);
        } else {
            console.error('Élément cuveOfInfo non trouvé !');
        }
        
        console.log('Champs remplis - Display:', ofDescription, 'ID:', ofId);
    }
    
    function submitCuveHydrolyseForm() {
        console.log('Soumission du formulaire Cuve Hydrolyse');
        
        const form = document.getElementById('cuveHydrolyseForm');
        const formData = new FormData(form);
        
        // Validation des champs obligatoires
        const ofId = document.getElementById('cuve_of_id').value;
        const cuveNumero = document.getElementById('cuve_numero').value;
        const debitEnzyme = document.getElementById('cuve_debit_enzyme').value;
        const temperature = document.getElementById('cuve_temperature').value;
        const quantiteEnzyme = document.getElementById('cuve_quantite_enzyme').value;
        const matiere = document.getElementById('cuve_matiere').value;
        const initialPilote = document.getElementById('cuve_initial_pilote').value;
        const controlVerre = document.querySelector('input[name="control_verre"]:checked');
        
        // Vérification de tous les champs obligatoires
        if (!ofId) {
            alert('⚠️ L\'Ordre de Fabrication est obligatoire');
            return;
        }
        
        if (!cuveNumero) {
            alert('⚠️ Le numéro de cuve est obligatoire');
            return;
        }
        
        if (!debitEnzyme) {
            alert('⚠️ Le débit d\'incorporation d\'enzyme est obligatoire');
            return;
        }
        
        if (!temperature) {
            alert('⚠️ La température d\'hydrolyse est obligatoire');
            return;
        }
        
        if (!quantiteEnzyme) {
            alert('⚠️ La quantité d\'enzyme est obligatoire');
            return;
        }
        
        if (!matiere) {
            alert('⚠️ La matière ajoutée est obligatoire');
            return;
        }
        
        if (!initialPilote) {
            alert('⚠️ L\'initial pilote est obligatoire');
            return;
        }
        
        if (!controlVerre) {
            alert('⚠️ Le contrôle visuel est obligatoire');
            return;
        }
        
        // Convertir les données du formulaire en objet
        const data = {};
        for (let [key, value] of formData.entries()) {
            data[key] = value;
        }
        
        // Ajouter la date de création
        data['created_at'] = new Date().toISOString();
        
        console.log('=== DEBUG FORMULAIRE CUVE ===');
        console.log('OF ID trouvé:', ofId);
        console.log('Données FormData brutes:');
        for (let [key, value] of formData.entries()) {
            console.log(`  ${key}: ${value}`);
        }
        console.log('Objet final à envoyer:', data);
        console.log('=== FIN DEBUG ===');
        
        // Envoyer les données
        fetch('/cuve-cereales/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(data => {
            console.log('Réponse du serveur:', data);
            if (data.success) {
                alert('✅ ' + data.message);
                
                // Fermer le modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('cuveHydrolyseModal'));
                modal.hide();
                
                // Réinitialiser le formulaire
                document.getElementById('cuveHydrolyseForm').reset();
                
                // Optionnel : recharger la page pour voir les nouveaux données
                location.reload();
            } else {
                alert('❌ ' + data.message);
            }
        })
        .catch(error => {
            console.error('Erreur:', error);
            alert('❌ Erreur de communication avec le serveur');
        });
    }
    
    // Fonction pour charger les données HACCP existantes
    function loadExistingHaccpData(ofId) {
        console.log('Chargement des données HACCP pour OF ID:', ofId);
        
        fetch('/haccp/api/get/' + ofId)
            .then(response => response.json())
            .then(data => {
                console.log('Données HACCP reçues:', data);
                
                if (data.exists) {
                    // Préremplir les champs avec les données existantes
                    const haccpData = data.data;
                    
                    document.getElementById('filtre_pasteurisateur_resultat').checked = haccpData.filtre_pasteurisateur_resultat;
                    document.getElementById('filtre_nep_resultat').checked = haccpData.filtre_nep_resultat;
                    document.getElementById('temperature_cible').value = haccpData.temperature_cible || 110;
                    document.getElementById('temperature_indique').value = haccpData.temperature_indique || '';
                    document.getElementById('initialProduction').value = haccpData.initialProduction || '';
                    document.getElementById('initialNEP').value = haccpData.initialNEP || '';
                    document.getElementById('initialTEMP').value = haccpData.initialTEMP || '';
                    
                    // Mettre à jour les status visuels
                    updateStatus();
                    
                    console.log('Données HACCP existantes chargées et préremplies');
                } else {
                    console.log('Aucune donnée HACCP existante, nouveau formulaire');
                    // Réinitialiser le formulaire pour un nouvel OF
                    document.getElementById('haccpForm').reset();
                    document.getElementById('temperature_cible').value = 110;
                    updateStatus();
                }
            })
            .catch(error => {
                console.error('Erreur lors du chargement des données HACCP:', error);
                // En cas d'erreur, on garde le formulaire vide
                document.getElementById('haccpForm').reset();
                document.getElementById('temperature_cible').value = 110;
                updateStatus();
            });
    }
    </script>
</body>
</html>
